------- FILE drawScene.asm LEVEL 1 PASS 1
      1  0000					      PROCESSOR	6502
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  0000 ????						; with your views.  Please contribute, if you think you can improve this
     19  0000 ????						; file!
     20  0000 ????						;
     21  0000 ????						; Latest Revisions...
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????						;-------------------------------------------------------------------------------
     45  0000 ????						; TIA_BASE_ADDRESS
     46  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  0000 ????						; Normally 0, the base address should (externally, before including this file)
     48  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  0000 ????						; < $40 as a bankswitch.
     51  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     52  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     53  0000 ????				      ENDIF
     54  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  0000 ????						; *OR* by declaring the label before including this file, eg:
     57  0000 ????						; TIA_BASE_ADDRESS = $40
     58  0000 ????						;   include "vcs.h"
     59  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  0000 ????						; for the mirrored ROM hardware registers.
     62  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     66  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  0000 ????				      ENDIF
     68  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  0000 ????				      ENDIF
     71  0000 ????						;-------------------------------------------------------------------------------
     72  0000 ????
     73  0000 ????						;-------------------------------------------------------------------------------
     74 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     75 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     76 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     77 U0000							;; DS itu untuk mesan memory ternyata (ds 1 --> Mem 1 byte)
     78 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     79 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     80 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     81 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     82 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     83 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     84 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     85 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     86 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     87 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     88 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     89 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     90 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     91 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     92 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     93 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     94 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     95 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     96 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     97 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     98 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     99 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    100 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    101 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    102 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    103 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    104 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    105 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    106 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    107 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    108 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    109 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    110 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    111 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    112 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    113 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    114 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    115 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    116 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    117 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    118 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    119 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    120 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    121 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    122 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    123 U002d
    124 U002d							;-------------------------------------------------------------------------------
    125 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    126 U0000					      ORG	TIA_BASE_READ_ADDRESS
    127 U0000							;											bit 7	 bit 6
    128 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    129 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    130 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    131 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    132 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    133 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    134 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    135 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    136 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    137 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    138 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    139 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    140 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    141 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    142 U000e							;-------------------------------------------------------------------------------
    143 U0000 ????				      SEG.U	RIOT
    144 U0280					      ORG	$280
    145 U0280
    146 U0280							; RIOT MEMORY MAP
    147 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    148 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    149 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    150 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    151 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    152 U0284		       00	   INTIM      ds	1	; $284		Timer output
    153 U0285		       00	   TIMINT     ds	1	; $285
    154 U0286							; Unused/undefined registers ($285-$294)
    155 U0286		       00		      ds	1	; $286
    156 U0287		       00		      ds	1	; $287
    157 U0288		       00		      ds	1	; $288
    158 U0289		       00		      ds	1	; $289
    159 U028a		       00		      ds	1	; $28A
    160 U028b		       00		      ds	1	; $28B
    161 U028c		       00		      ds	1	; $28C
    162 U028d		       00		      ds	1	; $28D
    163 U028e		       00		      ds	1	; $28E
    164 U028f		       00		      ds	1	; $28F
    165 U0290		       00		      ds	1	; $290
    166 U0291		       00		      ds	1	; $291
    167 U0292		       00		      ds	1	; $292
    168 U0293		       00		      ds	1	; $293
    169 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    170 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    171 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    172 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    173 U0298							;-------------------------------------------------------------------------------
    174 U0298							; The following required for back-compatibility with code which does not use
    175 U0298							; segments.
    176  0000 ????				      SEG
    177  0000 ????						; EOF
------- FILE drawScene.asm
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE drawScene.asm
      4  0000 ????				      SEG	Code
      5  f000					      ORG	$F000	; Define the Origin of Cartridge
      6  f000				   Start
      0  f000					      CLEAN_START		; Clear RAM and TIA;
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
      8  f00b
      9  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  f00b							; Start A new frame by turning ON VBLANK and VSYNC
     11  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12  f00b				   NextFrame
     13  f00b		       a9 02		      LDA	#2	; This turning ON binary %0000 0010
     14  f00d		       85 01		      STA	VBLANK	; Turn on VBLANK;
     15  f00f		       85 00		      STA	VSYNC	; Turn on VSYNC       
     16  f011
     17  f011							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  f011							; Generate the three lines of VSYNC
     19  f011							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  f011		       85 02		      STA	WSYNC	; FirstScanLine
     21  f013		       85 02		      STA	WSYNC	; SecondScanLine
     22  f015		       85 02		      STA	WSYNC	; ThirdScanLine
     23  f017
     24  f017		       a9 00		      LDA	#0	; 
     25  f019		       85 00		      STA	VSYNC	; Turn OFF VSYNC
     26  f01b
     27  f01b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     28  f01b							; Let TIA output the recommended 37 scanlines of VBLANK
     29  f01b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     30  f01b
     31  f01b		       a2 25		      LDX	#37	; store 37 decimal value into register X;
     32  f01d				   LoopVBlank
     33  f01d		       85 02		      STA	WSYNC	; Hit WSYNC and wait for the next scanline, Shoot the beam
     34  f01f		       ca		      DEX		; decrement x;
     35  f020		       d0 fb		      BNE	LoopVBlank	; While x != 0
     36  f022
     37  f022							;; If Loop done, Turn off the VBlank
     38  f022		       a9 00		      LDA	#0	;
     39  f024		       85 01		      STA	VBLANK	; Turn Off the VBlank
     40  f026
     41  f026							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f026							; Draw 192 Scanlines (Kernel)
     43  f026							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  f026
     45  f026		       a2 c0		      LDX	#192	; Counter for 192 visible scanlines
     46  f028
     47  f028				   LoopVisible
     48  f028		       86 09		      STX	COLUBK	; Set the background color;
     49  f02a		       85 02		      STA	WSYNC	; Wait for the next scanline
     50  f02c		       ca		      DEX		;
     51  f02d		       d0 f9		      BNE	LoopVisible	; While (X != 0)
     52  f02f
     53  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f02f							; Output 30 more VBLANK lines ( Overscan) To complete the frame
     55  f02f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f02f		       a9 02		      LDA	#2
     57  f031		       85 01		      STA	VBLANK	; Hit and turn on VBLANK
     58  f033
     59  f033		       a2 1e		      LDX	#30	; Cntour for 30scanlinse
     60  f035				   LoopOverscan
     61  f035		       85 02		      STA	WSYNC	; Wait for the next scanline
     62  f037		       ca		      DEX		;
     63  f038		       d0 fb		      bne	LoopOverscan	; LoopWhile X != 0
     64  f03a
     65  f03a		       4c 0b f0 	      JMP	NextFrame	; Go to the next frame;
     66  f03d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67  f03d							; Complete the ROM size to 4KB
     68  f03d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f03d
     70  fffc					      ORG	$FFFC
     71  fffc		       00 f0		      .word.w	Start
     72  fffe		       00 f0		      .word.w	Start
     73  10000
     74  10000
     75  10000
     76  10000
